buildscript {
    repositories {
        maven {
            url 'https://tool.digitaldxc.com/artifactory/plugins-release-local'
            credentials {
                username = artifactoryUser
                password = artifactoryPass
            }
        }
		maven {
      		url 'https://plugins.gradle.org/m2/'
    	}
    	maven {
			url 'http://repository.openbakery.org/'
		}
    }
    dependencies {
        classpath 'org.openbakery:xcode-plugin:0.15.1'
        classpath 'com.digitalservices.credstash:ds-credstash:1.0.0'
    }
}

apply plugin: 'org.openbakery.xcode-plugin'
apply plugin: com.digitalservices.DsCredentialsPlugin

def target_name = 'Well Track'
def ipa_name = 'well-track'

def appProvision = 'USPS_GVSU_Well_Track.mobileprovision'
def watchProvision = 'USPS_GVSU_Well_Track_Watch.mobileprovision'
def watchExtProvision = 'USPS_GVSU_Well_Track_Watch_Extension.mobileprovision'

def cert_name = 'Dev2018.p12'
def cert_password = getPassword('ios-digitalservices-dev')


def hockeyapp_token = getPassword('welltrack-devtoken')
def hockeyapp_appid = "d5eb49a2c2584102836a1bfa5660d69b"

def minorVersion = System.getenv('BUILD_NUMBER') as Integer ?: 999
def appVersion = '1.0.' + minorVersion as String

def currentPath = file(".")
def defaultEnvironment = 'Debug'
def environment = defaultEnvironment
def configuration = 'Debug'


if (System.properties['DEPLOY_ENVIRONMENT'] != null) {
	environment = System.properties['DEPLOY_ENVIRONMENT'].toString()
	if(environment == 'Test') {
		configuration = 'Release'
	} else {
		configuration = environment
	}
}

xcodebuild {
  scheme = target_name
  target = target_name
  configuration = configuration
  
  simulator = false
  ipaFileName = ipa_name + "-" + environment + "-" + appVersion
  
  signing {
		mobileProvisionURI = ['file://' + currentPath + '/'+ appProvision,
								'file://' + currentPath + '/'+ watchProvision,
								'file://' + currentPath + '/'+ watchExtProvision]
		certificateURI = 'file://' + currentPath + '/' + cert_name
		certificatePassword = cert_password
	}
}

infoplist {
	version = minorVersion
	shortVersionString = appVersion
	bundleIdentifier = 'com.well-track.ios'
}

tasks.hockeyapp.mustRunAfter tasks.package

gradle.taskGraph.whenReady { taskGraph ->
	if (taskGraph.hasTask(tasks.hockeyapp)) {
		hockeyapp {
			apiToken = hockeyapp_token
			appID = hockeyapp_appid
			notes =  environment + ' build generated automatically'
			notify = 1
		}
	}
}

import org.openbakery.util.PlistHelper
import org.openbakery.CommandRunner

task updateInfoPlist() {
	doLast {
		PlistHelper plistHelper = new PlistHelper(new CommandRunner())
	
		File infoPlistWatchkit = new File('Well Track Watch/Info.plist')
		plistHelper.setValueForPlist(infoPlistWatchkit, "CFBundleIdentifier", infoplist.bundleIdentifier + ".watchkit")
		plistHelper.setValueForPlist(infoPlistWatchkit, "CFBundleShortVersionString", appVersion)
		plistHelper.setValueForPlist(infoPlistWatchkit, "CFBundleVersion", minorVersion as String)
		plistHelper.setValueForPlist(infoPlistWatchkit, "WKCompanionAppBundleIdentifier", infoplist.bundleIdentifier)


		File infoPlistWatchkitExtenstion = new File('Well Track Watch Extension/Info.plist')
		plistHelper.setValueForPlist(infoPlistWatchkitExtenstion, "CFBundleIdentifier", infoplist.bundleIdentifier + ".watchkit.extension")
		plistHelper.setValueForPlist(infoPlistWatchkitExtenstion, "CFBundleShortVersionString", appVersion)
		plistHelper.setValueForPlist(infoPlistWatchkitExtenstion, "CFBundleVersion", minorVersion as String)
		plistHelper.setValueForPlist(infoPlistWatchkitExtenstion, "NSExtension:NSExtensionAttributes:WKAppBundleIdentifier", infoplist.bundleIdentifier + ".watchkit")
	}
}

infoplistModify.dependsOn updateInfoPlist

task buildApp (type: GradleBuild) {

    doFirst {
		println '==========================================================='
		println 'buildType: ' + environment
		println '==========================================================='

		switch (environment) {
			case 'Debug':
				tasks = ['clean',
						 'xcodebuild']
				println 'Running dev tasks: ' + tasks
				break
			case 'Release':
				tasks = ['clean',
						 'xcodebuild',
						 'archive',
						 'package',
						 'hockeyapp']
				println 'Running release tasks: ' + tasks
				break
			default:
				tasks = ['clean',
						 'xcodebuild']
				println 'Running local tasks: ' + tasks
				break
		}
    }
}